#!/bin/zsh

set -x -e

TOOLCHAIN=$1
ARCH=$(basename "$TOOLCHAIN")
DEST=out/$ARCH

[ -x "$TOOLCHAIN"/compile-c ] || { echo "error: "$TOOLCHAIN"/compile-c not found"}

ln -sfn $PWD/$DEST $TOOLCHAIN/lib

TOOLCHAIN=$(greadlink -f $TOOLCHAIN)

case $ARCH in
  win*)
    LIBUDEV=no
    POSIX=no
    ;;
  osx)
    LIBUDEV=no
    ;;
  linux*)
    ;;
  openwrt-mips*)
    LIBLUA=no
    ;;
  *)
    echo "Unknown or no platform given: $1"
    exit 1
esac

if [[ "$2" = clean ]]; then
  rm -rf $DEST
elif [[ ! -z $2 ]]; then
  rm -rf $DEST/$2
fi

if [[ $LIBLUA != no ]]; then
  cfl=($cfl -Ilua-5.1.5/src)
fi
TEMP=temp-$ARCH

mkdir -p $DEST

build() {
  if [[ -e $DEST/$1 ]]; then
    return
  fi
  mkdir -p $TEMP
  (build-$1) || echo "building $1 failed"
  rm -r $TEMP
}

build-liblua.a () {
  cat > $DEST/lua_compat52.h <<EOF
EOF

  [[ $LIBLUA == no ]] && return 0
  SRC=lua-5.1.5/src
    files=(lapi.c lcode.c ldebug.c ldo.c ldump.c lfunc.c lgc.c llex.c
        lmem.c lobject.c lopcodes.c lparser.c lstate.c lstring.c
        ltable.c ltm.c lundump.c lvm.c lzio.c
        lauxlib.c lbaselib.c ldblib.c liolib.c lmathlib.c loslib.c
        ltablib.c lstrlib.c loadlib.c linit.c
        print.c
#        lbitlib.c lcorolib.c lctype.c
        )

  cat > $TEMP/config.h <<EOF
#if defined(__APPLE__)
#  define LUA_USE_MACOSX
#  define LUA_USE_DLOPEN
#endif

#if defined(__linux__)
#  define LUA_USE_LINUX
#endif

#if defined(__ANDROID__)
#include <locale.h>

#define lconv rpl_lconv
struct lconv {
  char decimal_point[1];
};

#define localeconv rpl_localeconv
__attribute__((__unused__)) static struct lconv *localeconv(void)
{
  return 0;
}
#endif
EOF

  for file in $files; do
    "$TOOLCHAIN"/compile-c $cfl -include $TEMP/config.h -o $TEMP/${file:r}.o -c $SRC/${file:r}.c
  done

  "$TOOLCHAIN"/make-static-lib $DEST/liblua.a $TEMP/${^files:r}.o
  "$TOOLCHAIN"/compile-c $cfl -include $TEMP/config.h -o $DEST/luac $SRC/luac.c $DEST/liblua.a $ldfl -lm
  cp $SRC/{lauxlib,lualib,luaconf,lua}.h $DEST
}

build-liblua-socket.a() {
  SRC=luasocket/src
  files=(luasocket.o compat.o timeout.o buffer.o io.o auxiliar.o options.o inet.o
      tcp.o udp.o except.o select.o mime.o)
  if [[ $ARCH == win* ]]; then
    files=(wsocket.o $files)
  else
    files=(usocket.o unix.o unixdgram.o unixstream.o $files)
  fi

  for file in $files; do
    "$TOOLCHAIN"/compile-c $cfl -DNDEBUG -include $DEST/lua_compat52.h -o $TEMP/${file:r}.o -c $SRC/${file:r}.c
  done

  "$TOOLCHAIN"/make-static-lib $DEST/liblua-socket.a $TEMP/${^files}
}

build-liblua-filesystem.a() {
  SRC=luafilesystem/src

  "$TOOLCHAIN"/compile-c $cfl -o $TEMP/lfs.o -c $SRC/lfs.c

  "$TOOLCHAIN"/make-static-lib $DEST/liblua-filesystem.a $TEMP/lfs.o
}

build-liblua-posix.a() {
 if [[ $POSIX == no ]]; then
   return 0
 fi
 SRC=luaposix

 cat > $TEMP/config.h << EOF
#define PACKAGE_NAME "luaposix"
#define PACKAGE_STRING "luaposix 33.4.0"
#define VERSION "5.1.24"

#if defined(__ANDROID__)
#include <string.h>
#define O_DSYNC O_SYNC
extern char *mkdtemp(char *path);
int gethostid(void) { return 0; }
char *ctermid (char *buf)
{
  static char devname[] = "/dev/tty";
  if (buf == 0)
    return devname;

  return strcpy (buf, "/dev/tty");
}
#endif
EOF
 if [[ $ARCH == android* ]]; then
   wget -O $TEMP/glob.c https://raw.github.com/white-gecko/TokyoCabinet/master/glob.c
   wget -O $TEMP/glob.h https://raw.github.com/white-gecko/TokyoCabinet/master/glob.h
   "$TOOLCHAIN"/compile-c $cfl -I$TEMP -o $TEMP/_glob.o -c $TEMP/glob.c
 fi

 # NEW: "$TOOLCHAIN"/compile-c $cfl -I$TEMP -I$SRC/ext/include -o $TEMP/posix.o -c $SRC/ext/posix/posix.c
 "$TOOLCHAIN"/compile-c $cfl -I$TEMP -I$SRC/ext/include -o $TEMP/posix.o -c $SRC/lposix.c

 "$TOOLCHAIN"/make-static-lib $DEST/liblua-posix.a $TEMP/posix.o $TEMP/_glob.o(N)
}

build-liblua-udev.a() {
  [[ $LIBUDEV == no ]] && return 0
  SRC=lua-udev

  "$TOOLCHAIN"/compile-c $cfl -I$DEST -o $TEMP/udev.nobj.o -c $SRC/udev.nobj.c

  "$TOOLCHAIN"/make-static-lib $DEST/liblua-udev.a $TEMP/*.o
}

build-libev.a() {
  "$TOOLCHAIN"/compile-c $cfl -DNDEBUG -o $TEMP/ev.o -c ev.c
  "$TOOLCHAIN"/make-static-lib $DEST/libev.a $TEMP/ev.o
  cat > $DEST/ev.h <<EOF
#include "../../ev.h"
EOF
}

build-liblua-ev.a() {
  SRC=lua-ev

  "$TOOLCHAIN"/compile-c $cfl -I$DEST -o $TEMP/lua_ev.o -c $SRC/lua_ev.c

  "$TOOLCHAIN"/make-static-lib $DEST/liblua-ev.a $TEMP/*.o
}

build-liblua-md5.a() {
  SRC=md5/src
  files=(md5 md5lib
         #compat-5.2
        )

  for file in $files; do
    "$TOOLCHAIN"/compile-c $cfl -include $DEST/lua_compat52.h -o $TEMP/$file.o -c $SRC/$file.c
  done
  "$TOOLCHAIN"/make-static-lib $DEST/liblua-md5.a $TEMP/${^files}.o
  cp $SRC/md5.h $DEST/lua-md5.h
}

build-libmodpbase64.a() {
  SRC=$PWD/stringencoders-v3.10.3/src
  types=(b2 b16 b64 burl ascii bjavascript) # FIXME: b85

  cd $TEMP

  sed -e 's/b64/b64w/g' < $SRC/modp_b64.c > modp_b64w.c
  cp $SRC/modp_b64w.h .

  case "$ARCHPREFIX" in
    mips-*)
      cat > config.h <<EOF
#define WORDS_BIGENDIAN 1
EOF
      ;;
    *)
      touch config.h
      ;;
  esac


  for type in $types; do
    gcc -o modp_${type}_gen $SRC/arraytoc.c $SRC/modp_${type}_gen.c
    ./modp_${type}_gen > modp_${type}_data.h
  done
  B64WCHARS="-_."
  ./modp_b64_gen ${B64WCHARS} > modp_b64w_data.h

  types=($types b64w numtoa)

  for type in $types; do
    srcname=modp_${type}.c
    if [[ ! -e "$srcname" ]]; then
      srcname="$SRC/$srcname"
    fi
    "$TOOLCHAIN"/compile-c $cfl -I. -o $type.o -c "$srcname"
  done

  cd -

  "$TOOLCHAIN"/make-static-lib $DEST/libmodpbase64.a $TEMP/${^types}.o
  cp $SRC/modp_${^types}.h $DEST
}

build-libsha2.a() {
  SRC=$PWD/sha2-07-01-07
  files=(sha1 sha2)

  for file in $files; do
    "$TOOLCHAIN"/compile-c $cfl -o $TEMP/$file.o -c $SRC/$file.c
  done

  "$TOOLCHAIN"/make-static-lib $DEST/libsha2.a $TEMP/${^files}.o
  mkdir -p $DEST/sha2
  cp $SRC/*.h $DEST/sha2
}

build-libudev.a() {
  if [[ $LIBUDEV == no ]]; then
    return 0
  fi
  SRC=$PWD/udev-182/src
  #pcfl=(-DENABLE_LOGGING -DENABLE_DEBUG)
  pcfl=($pcfl -include $TEMP/config.h)
  files=(libudev libudev-device libudev-device-private libudev-enumerate libudev-list libudev-monitor)
  files=($files libudev-queue libudev-queue-private libudev-util libudev-util-private)

cat > $TEMP/config.h <<EOF
#define _GNU_SOURCE

#define SYSCONFDIR "/etc"
#define PKGLIBEXECDIR "/lib/udev"

#if defined(__ANDROID__)
#include "fcntl.h"
#define SOCK_NONBLOCK O_NONBLOCK
#define SOCK_CLOEXEC O_CLOEXEC
#endif

#define MAX(a,b) ({ __typeof__ (a) _a = (a); __typeof__ (b) _b = (b);  _a > _b ? _a : _b; })
#define MIN(a,b) ({ __typeof__ (a) _a = (a); __typeof__ (b) _b = (b);  _a < _b ? _a : _b; })
EOF

  for file in $files; do
    "$TOOLCHAIN"/compile-c $cfl $pcfl -o $TEMP/$file.o -c $SRC/$file.c
  done

  cat > $TEMP/mempcpy.c <<EOF
#include <string.h>

void *mempcpy(void *dest, const void *src, size_t n) {
  memcpy(dest, src, n);
  dest += n;
  return dest;
}
EOF
  "$TOOLCHAIN"/compile-c $cfl $pcfl -o $TEMP/mempcpy.o -c $TEMP/mempcpy.c

  "$TOOLCHAIN"/make-static-lib $DEST/libudev.a $TEMP/${^files}.o $TEMP/mempcpy.o
  cp $SRC/libudev.h $DEST/
}

build-liblua-winapi.a () {
  if [[ $ARCH != win* ]]; then
    return 0
  fi
  SRC=$PWD/winapi
  files=(winapi wutils)
  cfl=(${cfl:#*UNICODE*} -DPSAPI_VERSION=1)

  for file in $files; do
    "$TOOLCHAIN"/compile-c $cfl -o $TEMP/$file.o -c $SRC/$file.c
  done

  "$TOOLCHAIN"/make-static-lib $DEST/liblua-winapi.a $TEMP/${^files}.o
}

build-libluachecks.a () {
  SRC=luasched/c

  "$TOOLCHAIN"/compile-c $cfl $flags -o $TEMP/checks.o -c $SRC/checks.c
  "$TOOLCHAIN"/make-static-lib $DEST/libluachecks.a $TEMP/checks.o
}

build-liblua-lpeg.a () {
  SRC=lpeg
  files=(lpvm lpcap lptree lpcode lpprint)

  for file in $files; do
    "$TOOLCHAIN"/compile-c $cfl -I$DEST -o $TEMP/$file.o -c $SRC/$file.c
  done

  "$TOOLCHAIN"/make-static-lib $DEST/liblua-lpeg.a $TEMP/${^files}.o
}

build-liblua-cjson.a () {
  SRC=$PWD/lua-cjson
  files=(lua_cjson fpconv strbuf)

  for file in $files; do
    "$TOOLCHAIN"/compile-c $cfl -o $TEMP/$file.o -c $SRC/$file.c
  done

  "$TOOLCHAIN"/make-static-lib $DEST/liblua-cjson.a $TEMP/${^files}.o
}

build-liblua-tweetnacl.a () {
  SRC=$PWD/luatweetnacl
  files=(luatweetnacl randombytes tweetnacl)

  for file in $files; do
    "$TOOLCHAIN"/compile-c $cfl -o $TEMP/$file.o -c $SRC/$file.c
  done

  "$TOOLCHAIN"/make-static-lib $DEST/liblua-tweetnacl.a $TEMP/${^files}.o
}

build libev.a
build libmodpbase64.a
build libsha2.a
build libudev.a

build liblua.a
build liblua-socket.a
build liblua-filesystem.a
build liblua-md5.a
build liblua-winapi.a
build liblua-udev.a
build liblua-ev.a
build liblua-posix.a
build libluachecks.a
build liblua-lpeg.a
build liblua-cjson.a
build liblua-tweetnacl.a
